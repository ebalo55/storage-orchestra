// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file
// manually.

/** user-defined commands **/


export const commands = {
    async startServer(): Promise<Result<number, string>> {
        try {
            return {status: "ok", data: await TAURI_INVOKE("start_server")};
        }
        catch (e) {
            if (e instanceof Error) {
                throw e;
            }
			else {
                return {status: "error", error: e as any};
            }
        }
    },
    /**
     * Sets the password for the application secure storage.
     *
     * # Arguments
     *
     * * `password` - The password to set.
     *
     * # Returns
     *
     * Nothing.
     */
    async initState(password: string): Promise<Result<null, string>> {
        try {
            return {status: "ok", data: await TAURI_INVOKE("init_state", {password})};
        }
        catch (e) {
            if (e instanceof Error) {
                throw e;
            }
			else {
                return {status: "error", error: e as any};
            }
        }
    },
    /**
     * Gets data from the state.
     *
     * # Arguments
     *
     * * `state` - The state to get the data from.
     * * `key` - The key to get the data from.
     *
     * # Returns
     *
     * The data as a JSON value.
     */
    async getFromState(key: AppStateInnerKeys): Promise<Result<JsonValue, string>> {
        try {
            return {status: "ok", data: await TAURI_INVOKE("get_from_state", {key})};
        }
        catch (e) {
            if (e instanceof Error) {
                throw e;
            }
			else {
                return {status: "error", error: e as any};
            }
        }
    },
    /**
     * Removes data from the state.
     *
     * # Arguments
     *
     * * `state` - The state to remove the data from.
     * * `key` - The key to remove the data from.
     *
     * # Returns
     *
     * Nothing.
     */
    async removeFromState(key: AppStateInnerKeys): Promise<Result<null, string>> {
        try {
            return {status: "ok", data: await TAURI_INVOKE("remove_from_state", {key})};
        }
        catch (e) {
            if (e instanceof Error) {
                throw e;
            }
			else {
                return {status: "error", error: e as any};
            }
        }
    },
    /**
     * Inserts data in the state.
     *
     * # Arguments
     *
     * * `state` - The state to insert the data in.
     * * `key` - The key to insert the data in.
     * * `data` - The data to insert.
     *
     * # Returns
     *
     * Nothing.
     */
    async insertInState(key: AppStateInnerKeys, data: JsonValue): Promise<Result<null, string>> {
        try {
            return {status: "ok", data: await TAURI_INVOKE("insert_in_state", {key, data})};
        }
        catch (e) {
            if (e instanceof Error) {
                throw e;
            }
			else {
                return {status: "error", error: e as any};
            }
        }
    },
};

/** user-defined events **/


/** user-defined constants **/


/** user-defined types **/

export type AppStateInnerKeys = "debounced_saver" | "password" | "providers"
export type JsonValue = null | boolean | number | string | JsonValue[] | Partial<{ [key in string]: JsonValue }>

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE } from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
    listen: (
        cb: TAURI_API_EVENT.EventCallback<T>,
    ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
    once: (
        cb: TAURI_API_EVENT.EventCallback<T>,
    ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
    emit: null extends T
          ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
          : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
    | {
          status: "ok";
          data: T
      }
    | {
          status: "error";
          error: E
      };

function __makeEvents__<T extends Record<string, any>>(
    mappings: Record<keyof T, string>,
) {
    return new Proxy(
        {} as unknown as {
            [K in keyof T]: __EventObj__<T[K]> & {
            (handle: __WebviewWindow__): __EventObj__<T[K]>;
        };
        },
        {
            get: (_, event) => {
                const name = mappings[event as keyof T];

                return new Proxy((
                    () => {}
                ) as any, {
                    apply: (_, __, [ window ]: [ __WebviewWindow__ ]) => (
                        {
                            listen: (arg: any) => window.listen(name, arg),
                            once:   (arg: any) => window.once(name, arg),
                            emit:   (arg: any) => window.emit(name, arg),
                        }
                    ),
                    get:   (_, command: keyof __EventObj__<any>) => {
                        switch (command) {
                            case "listen":
                                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
                            case "once":
                                return (arg: any) => TAURI_API_EVENT.once(name, arg);
                            case "emit":
                                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
                        }
                    },
                });
            },
        },
    );
}
